{% capture map_html %}
<div class="map-container">
  <div class="map-sidebar">
    {% for location in page.locations %}
    <div class="location-card" data-location-id="{{ location.id }}" onclick="focusOnLocation('{{ location.id }}')">
      <h3>{{ location.city }}</h3>
      <p>{{ location.description }}</p>
    </div>
    {% endfor %}
  </div>
  <div class="map-wrapper">
    <div id="travel-map"></div>
  </div>
</div>
{% endcapture %}

{% capture map_css %}
<style>
  .map-container {
    display: flex;
    width: 100%;
    margin: 20px 0;
  }
  
  .map-sidebar {
    width: 50%;
    padding-right: 20px;
    overflow-y: auto;
  }
  
  .map-wrapper {
    width: 50%;
    height: 500px;
  }
  
  #travel-map {
    width: 100%;
    height: 100%;
    border-radius: 8px;
  }
  
  .location-card {
    padding: 15px;
    margin-bottom: 15px;
    border-radius: 8px;
    background: white;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .location-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  }
  
  .location-card h3 {
    color: #6a3093;
    margin-top: 0;
  }
  
  /* 响应式设计 */
  @media (max-width: 768px) {
    .map-container {
      flex-direction: column;
    }
    
    .map-sidebar, .map-wrapper {
      width: 100%;
    }
    
    .map-sidebar {
      padding-right: 0;
      margin-bottom: 20px;
    }
  }
</style>
{% endcapture %}

{% capture map_js %}
<script>
  // 默认语言设置
  const userLang = navigator.language || navigator.userLanguage; 
  const defaultLang = userLang.startsWith('zh') ? 'zh' : 'en';
  
  // 地图初始化函数
  function initMap() {
    const locations = {{ page.locations | jsonify }};
    
    // 创建地图实例
    const map = L.map('travel-map', {
      scrollWheelZoom: false,
      attributionControl: false
    }).setView([locations[0].lat, locations[0].lng], 4);
    
    // 添加中文地图图层
    L.tileLayer.chinaProvider('GaoDe.Normal.Map', {
      maxZoom: 18,
      minZoom: 3
    }).addTo(map);
    
    // 创建紫色图标
    const purpleIcon = L.icon({
      iconUrl: 'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" fill="%236a3093"><path d="M16 0c-5.523 0-10 4.477-10 10 0 10 10 22 10 22s10-12 10-22c0-5.523-4.477-10-10-10zm0 16c-3.314 0-6-2.686-6-6s2.686-6 6-6 6 2.686 6 6-2.686 6-6 6z"/></svg>',
      iconSize: [24, 24],
      iconAnchor: [12, 24],
      popupAnchor: [0, -24]
    });
    
    // 添加地点标记和连线
    const markers = [];
    const latlngs = [];
    
    locations.forEach(location => {
      const marker = L.marker([location.lat, location.lng], {
        icon: purpleIcon,
        title: location.city
      }).addTo(map);
      
      // 添加弹出窗口
      marker.bindPopup(`
        <div class="map-popup">
          <h3>${location.city}</h3>
          <p>${location.description}</p>
          ${location.image ? `<img src="${location.image}" alt="${location.city}" style="max-width:100%; margin-top:10px;">` : ''}
        </div>
      `);
      
      markers.push(marker);
      latlngs.push([location.lat, location.lng]);
      
      // 存储引用以便通过ID访问
      marker.locationId = location.id;
    });
    
    // 添加紫色连线
    const polyline = L.polyline(latlngs, {
      color: '#6a3093',
      weight: 3,
      opacity: 0.7
    }).addTo(map);
    
    // 调整视图以显示所有标记
    map.fitBounds(polyline.getBounds(), { padding: [50, 50] });
    
    // 存储地图和标记引用
    window.travelMap = map;
    window.mapMarkers = markers;
  }
  
  // 点击卡片时聚焦对应地点
  function focusOnLocation(locationId) {
    const marker = window.mapMarkers.find(m => m.locationId === locationId);
    if (marker) {
      window.travelMap.setView(marker.getLatLng(), 8);
      marker.openPopup();
    }
  }
  
  // 页面加载完成后初始化地图
  document.addEventListener('DOMContentLoaded', initMap);
</script>
{% endcapture %}

{% capture map_dependencies %}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<script src="https://cdn.jsdelivr.net/npm/leaflet-chinese-tms@1.0.4/dist/leaflet-chinese-tms.min.js"></script>
{% endcapture %}

{{ map_dependencies }}
{{ map_html }}
{{ map_css }}
{{ map_js }}
